---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chains-secrets-admin
  namespace: openshift-pipelines
  annotations:
    argocd.argoproj.io/sync-wave: "0"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chains-secret-admin
  namespace: openshift-pipelines
  annotations:
    argocd.argoproj.io/sync-wave: "0"
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - create
      - get
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chains-secret-admin
  namespace: openshift-pipelines
  annotations:
    argocd.argoproj.io/sync-wave: "0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chains-secret-admin
subjects:
  - kind: ServiceAccount
    name: chains-secrets-admin
    namespace: openshift-pipelines
---
apiVersion: batch/v1
kind: Job
metadata:
  name: tekton-chains-signing-secret
  namespace: openshift-pipelines
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  template:
    spec:
      containers:
        - name: chains-secret-generation
          image: quay.io/redhat-appstudio/appstudio-utils:dbbdd82734232e6289e8fbae5b4c858481a7c057
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              cd /tmp
              # Try to handle that nicely. The object is expected to always exist so check the data.
              SIG_KEY_DATA=$(kubectl get secret signing-secrets -n openshift-pipelines -o jsonpath='{.data}')
              if [[ -n $SIG_KEY_DATA ]]; then
                echo "Signing secret exists and is non-empty."
              else
                # Delete secret/signing-secrets if already exists since by default cosign creates immutable secrets
                kubectl delete secrets -n openshift-pipelines signing-secrets --ignore-not-found=true

                # To make this run conveniently without user input let's create a random password
                RANDOM_PASS=$( head -c 12 /dev/urandom | base64 )

                # Generate the key pair secret directly in the cluster.
                # The secret should be created as immutable.
                echo "Generating k8s secret/signing-secrets with key-pair"
                env COSIGN_PASSWORD=$RANDOM_PASS cosign generate-key-pair k8s://openshift-pipelines/signing-secrets
              fi

              # If the secret is not marked as immutable, make it so.
              if [ "$(kubectl get secret signing-secrets -n openshift-pipelines -o jsonpath='{.immutable}')" != "true" ]; then
                echo "Making secret immutable"
                kubectl get secret signing-secrets -n openshift-pipelines -o yaml \
                | yq eval '.immutable = true' - \
                | kubectl apply -f -
              fi

              echo "Generating/updating the secret with the public key"
              kubectl create secret generic public-key \
                --namespace openshift-pipelines \
                --from-literal=cosign.pub="$(
                  cosign public-key --key k8s://openshift-pipelines/signing-secrets
                )" \
                --dry-run=client \
                -o yaml | kubectl apply -f -
      dnsPolicy: ClusterFirst
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 30
      serviceAccount: chains-secrets-admin
      serviceAccountName: chains-secrets-admin
