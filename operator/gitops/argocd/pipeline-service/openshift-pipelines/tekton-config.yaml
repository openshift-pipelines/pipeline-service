---
# Docs: https://github.com/tektoncd/operator/blob/main/docs/TektonConfig.md
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonConfig
metadata:
  name: config
  annotations:
    # This Argo CD annotation ensures that Argo CD will skip the dry if the resource is not yet known to the cluster,
    # the CRD will be applied and the resource can be created once the required dependencies are met.
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "0"
spec:
  targetNamespace: openshift-pipelines
  profile: all
  params:
    - name: createRbacResource
      value: "false"
  platforms:
    openshift:
      pipelinesAsCode:
        enable: true
        options:
          deployments:
            pipelines-as-code-watcher:
              spec:
                replicas: 1
            pipelines-as-code-webhook:
              spec:
                replicas: 1
  chain:
    # Configure TaskRun attestation.
    # RHTAP does not leverage the TaskRun attestations.
    # This tells Tekton Chains to not store them in the OCI registry.
    artifacts.taskrun.format: "in-toto"
    artifacts.taskrun.storage: ""

    # Configure image signing
    artifacts.oci.storage: "oci"

    # Configure PipelineRun attestation
    artifacts.pipelinerun.format: "in-toto"
    artifacts.pipelinerun.storage: "oci"

    # Rekor integration is disabled for now. It is planned to be re-introduced in the future.
    transparency.enabled: "false"
  trigger:
    options:
      configMaps:
        config-logging-triggers:
          data:
            loglevel.controller: info
            loglevel.webhook: info
            loglevel.eventlistener: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
  pipeline:
    default-service-account: appstudio-pipeline
    enable-api-fields: alpha
    enable-bundles-resolver: true
    enable-cluster-resolver: true
    enable-git-resolver: true
    enable-hub-resolver: true
    enable-tekton-oci-bundles: true
    enable-step-actions: true
    options:
      disabled: false
      configMaps:
        config-logging:
          data:
            loglevel.controller: info
            loglevel.webhook: info
            zap-logger-config: |
              {
                "level": "info",
                "development": false,
                "sampling": {
                  "initial": 100,
                  "thereafter": 100
                },
                "outputPaths": ["stdout"],
                "errorOutputPaths": ["stderr"],
                "encoding": "json",
                "encoderConfig": {
                  "timeKey": "ts",
                  "levelKey": "level",
                  "nameKey": "logger",
                  "callerKey": "caller",
                  "messageKey": "msg",
                  "stacktraceKey": "stacktrace",
                  "lineEnding": "",
                  "levelEncoder": "",
                  "timeEncoder": "iso8601",
                  "durationEncoder": "string",
                  "callerEncoder": ""
                }
              }
      deployments:
        tekton-operator-proxy-webhook:
          spec:
            template:
              spec:
                containers:
                  - name: proxy
                    resources:
                      requests:
                        cpu: 100m
                        memory: 100Mi
                      limits:
                        cpu: 500m
                        memory: 500Mi
        tekton-pipelines-webhook:
          spec:
            template:
              spec:
                containers:
                  - name: webhook
                    resources:
                      requests:
                        cpu: 200m
                        memory: 200Mi
                      limits:
                        cpu: '1'
                        memory: 1Gi
        tekton-pipelines-remote-resolvers:
          spec:
            replicas: 1
      horizontalPodAutoscalers:
        tekton-pipelines-webhook:
          spec:
            maxReplicas: 6
            minReplicas: 2
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
        tekton-operator-proxy-webhook:
          spec:
            maxReplicas: 6
            minReplicas: 2
            metrics:
              - resource:
                  name: cpu
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
              - resource:
                  name: memory
                  target:
                    averageUtilization: 100
                    type: Utilization
                type: Resource
    performance:
      disable-ha: false
      buckets: 1
      replicas: 1
      threads-per-controller: 32
      kube-api-qps: 50
      kube-api-burst: 50
  pruner:
    # The load on prod-rh01 is to the point now where tekton-results
    # can fall too far behind.  Until the watcher's log storage is rewritten
    # etc with SRVKP-4347 or if we risk adding more processing power (threads,qps,burst)
    # to the mem leak version of the watcher, we need the OSP pruner as a backup.
    disable: false
    keep-since: 60
    resources:
      - pipelinerun
    schedule: "*/10 * * * *"
