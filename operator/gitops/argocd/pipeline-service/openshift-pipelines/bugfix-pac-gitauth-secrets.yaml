# Solves https://issues.redhat.com/browse/RHTAPBUGS-256
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: openshift-gitops-cronjobs-admin
  annotations:
    argocd.argoproj.io/sync-wave: "0"
rules:
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - list
      - patch
      - create
      - delete
    resourceNames:
      - pac-secret-manager
  - apiGroups:
      - batch
    resources:
      - cronjobs
    verbs:
      - get
      - list
      - patch
      - create
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: openshift-gitops-cronjobs-admin
  annotations:
    argocd.argoproj.io/sync-wave: "0"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: openshift-gitops-cronjobs-admin
subjects:
  - kind: ServiceAccount
    name: openshift-gitops-argocd-application-controller
    namespace: openshift-gitops
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pac-secret-manager
  namespace: openshift-pipelines
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pac-secret-manager
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - list
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - list
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: pac-secret-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: pac-secret-manager
subjects:
  - kind: ServiceAccount
    name: pac-secret-manager
    namespace: openshift-pipelines
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pac-secret-reaper
  namespace: openshift-pipelines
spec:
  concurrencyPolicy: Forbid
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - image: registry.redhat.io/openshift4/ose-tools-rhel8@sha256:1054e906ee0183531b401d3c0b0d777cecb25ef95b1c9c48387c6cd7b0e57b9d
              command:
                - /bin/bash
                - -c
                - |
                  # Delete "pac-gitauth-*" secrets older than a day
                  set -o errexit
                  set -o nounset
                  set -o pipefail
                  for namespace in $(kubectl get namespaces -o name | cut -d/ -f2 | grep -E "\\-tenant$|^tekton-ci$"); do
                    echo "$namespace: Cleaning pac-gitauth secrets"
                    kubectl get secrets --namespace $namespace -o json | \
                      jq -r '.items[] |
                        select(.metadata.name |
                        startswith("pac-gitauth-")) |
                        select(.metadata.creationTimestamp | fromdateiso8601 < (now - 86400)) |
                        "secret/" + .metadata.name
                      ' | \
                      xargs --max-args 1 --no-run-if-empty kubectl delete -n $namespace
                  done
                  echo "Done"
              imagePullPolicy: Always
              name: delete-pac-secrets
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                    - ALL
                runAsNonRoot: true
                seccompProfile:
                  type: RuntimeDefault
          restartPolicy: "Never"
          serviceAccountName: pac-secret-manager
