---
# Based on: https://github.com/redhat-appstudio/build-definitions/blob/main/task/update-infra-deployments/0.1/update-infra-deployments.yaml
apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
  name: update-repository
spec:
  description: |
    Clones a repository, runs script in 'SCRIPT' parameter, and generates a pull-request to the repository if a change is detected.
  params:
    - name: COMMIT_BRANCH
      description: Name of the branch which holds the update created by the Pipeline
    - name: TARGET_BRANCH
      description: Name of the branch which is modified by the Pipeline
    - name: TARGET_GH_NAME
      description: Name of the repository which is modified by the Pipeline
    - name: TARGET_GH_OWNER
      description: Owner of the repository which is modified by the Pipeline
    - name: TARGET_GH_URL
      description: URL of github repository which is modified by the Pipeline
    - name: SCRIPT_IMAGE
      description: Image reference used to execute the script
    - name: SCRIPT_PATH
      description: Path to the script updating the repository
    - name: SCRIPT_ARGS
      description: Arguments to the bash script
      type: array
    - name: GIT_IMAGE
      description: Image reference containing the git command
      default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
    - name: GIT_USER
      description: Username to appear in the commit
      default: "Tekton CI"
    - name: GIT_EMAIL
      description: Email to appear in the commit
      default: "tekton-ci@example.com"
  steps:
    - name: clone-git-repository
      image: $(params.GIT_IMAGE)
      workingDir: $(workspaces.workdir.path)
      env:
        - name: TARGET_BRANCH
          value: $(params.TARGET_BRANCH)
        - name: TARGET_GH_NAME
          value: $(params.TARGET_GH_NAME)
        - name: TARGET_GH_OWNER
          value: $(params.TARGET_GH_OWNER)
        - name: TARGET_GH_URL
          value: $(params.TARGET_GH_URL)
      script: |
        #!/bin/bash
        set -o errexit
        set -o nounset
        set -o pipefail

        WORK_DIR="${PWD}/${TARGET_GH_OWNER}/${TARGET_GH_NAME}"
        if [ -e "${WORK_DIR}" ]; then
          echo "Clean checkout of '${TARGET_GH_URL}/${TARGET_BRANCH}' in '${WORK_DIR}'"
          cd "${WORK_DIR}"
          git clean -d --force
          git reset --hard
          git checkout "${TARGET_BRANCH}"
        else
          echo "Cloning '${TARGET_GH_URL}/${TARGET_BRANCH}' to '${WORK_DIR}'"
          mkdir -p "$(dirname "${WORK_DIR}")"
          cd "$(dirname "${WORK_DIR}")"
          git clone --branch "${TARGET_BRANCH}" "${TARGET_GH_URL}" "${TARGET_GH_NAME}"
        fi
    - name: run-update-script
      image: $(params.SCRIPT_IMAGE)
      workingDir: $(workspaces.workdir.path)
      env:
        - name: COMMIT_BRANCH
          value: $(params.COMMIT_BRANCH)
        - name: GIT_EMAIL
          value: $(params.GIT_EMAIL)
        - name: GIT_USER
          value: $(params.GIT_USER)
        - name: SCRIPT_PATH
          value: $(params.SCRIPT_PATH)
        - name: TARGET_BRANCH
          value: $(params.TARGET_BRANCH)
        - name: TARGET_GH_NAME
          value: $(params.TARGET_GH_NAME)
        - name: TARGET_GH_OWNER
          value: $(params.TARGET_GH_OWNER)
        - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
          value: $(workspaces.basic-auth.path)
      args: ["$(params.SCRIPT_ARGS[*])"]
      script: |
        #!/bin/bash
        set -o errexit
        set -o nounset
        set -o pipefail

        SCRIPT_ARGS=( "$@" )

        # Go to repository directory
        WORK_DIR="${PWD}/${TARGET_GH_OWNER}/${TARGET_GH_NAME}"
        cd "${WORK_DIR}"
        echo "${PWD}"

        # Setup git
        git config --global safe.directory "${PWD}"
        git config --local user.email "$GIT_EMAIL"
        git config --local user.name "$GIT_USER"
        git remote set-url origin "$(cat "$WORKSPACE_BASIC_AUTH_DIRECTORY_PATH/.git-credentials")"

        # Create branch
        git branch --copy --force "$COMMIT_BRANCH"
        git checkout "$COMMIT_BRANCH"

        # Run script
        "${SCRIPT_PATH}" "${SCRIPT_ARGS[@]}"
    # Based on https://github.com/tektoncd/catalog/tree/main/task/github-app-token/0.2/
    - name: create-pull-request
      image: quay.io/redhat-appstudio/github-app-token@sha256:b4f2af12e9beea68055995ccdbdb86cfe1be97688c618117e5da2243dc1da18e
      workingDir: $(workspaces.workdir.path)
      env:
        - name: COMMIT_BRANCH
          value: $(params.COMMIT_BRANCH)
        - name: GITHUB_API_URL
          value: https://api.github.com
        - name: TARGET_BRANCH
          value: $(params.TARGET_BRANCH)
        - name: TARGET_GH_NAME
          value: $(params.TARGET_GH_NAME)
        - name: TARGET_GH_OWNER
          value: $(params.TARGET_GH_OWNER)
      script: |
        #!/bin/bash
        set -o errexit
        set -o nounset
        set -o pipefail

        # Go to repository directory
        WORK_DIR="${PWD}/${TARGET_GH_OWNER}/${TARGET_GH_NAME}"
        cd "${WORK_DIR}"

        # Push changes
        if ! git ls-remote --heads origin | grep -q "/$COMMIT_BRANCH$" \
          || ! git diff --quiet "origin/$COMMIT_BRANCH" ; then
          git push --force --set-upstream origin "$COMMIT_BRANCH"
          echo "Branch pushed successfully"
        else
          echo "No changes"
          exit 0
        fi

        GITHUB_TOKEN=$(git remote get-url origin | sed "s|https\?://[^:]*:\([^@]*\)@.*|\1|")
        echo "GITHUB_TOKEN=$GITHUB_TOKEN"

        DATA=$(cat << EOF
        {
          "title":"$(git log -1 --format="%s" | sed 's:":\\":g')",
          "body":"$(git log -1 --format="%b" | sed 's:":\\":g' | sed 's:$:\\n:g' | tr -d '\n')",
          "head":"$COMMIT_BRANCH",
          "base":"$TARGET_BRANCH"
        }
        EOF
        )

        curl --location \
          --request POST \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer $GITHUB_TOKEN" \
          --header "X-GitHub-Api-Version: 2022-11-28" \
          "${GITHUB_API_URL}/repos/${TARGET_GH_OWNER}/${TARGET_GH_NAME}/pulls" \
          --data "$DATA"
  workspaces:
    - name: workdir
      description: Shared storage to keep a single copy of the repositories
